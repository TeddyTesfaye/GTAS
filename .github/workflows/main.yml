name: Pipeline workflow
on:
  push:
   branches:
    - dev
jobs:
  build:
    name: webapp
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        name: Checkout latest code
      - uses: docker/build-push-action@v2
        name: Build and push GTAS web application image
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }} 
          repository: wcogtas/webapp 
          path: ./gtas-parent
          push: true
          dockerfile: ./gtas-parent/web-app.Dockerfile
          tags: dev
      - uses: docker/build-push-action@v2
        name: Build and push mariadb image
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }} 
          repository: wcogtas/mariadb
          path: ./gtas-parent
          push: true
          dockerfile: ./gtas-parent/mariadb.Dockerfile
          tags: dev
      - uses: docker/build-push-action@v2
        name: Build and push GTAS proxy image
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }} 
          repository: wcogtas/http-proxy
          path: ./gtas-parent
          push: true
          dockerfile: ./gtas-parent/docker-resources/proxy.Dockerfile
          tags: dev
      - uses: docker/build-push-action@v2
        name: Build and push GTAS scheduler image
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: wcogtas/gtas-scheduler
          path: .
          push: true
          dockerfile: ./gtas-parent/gtas-job-scheduler-war/gtas-scheduler.Dockerfile
          tags: dev
      - uses: docker/build-push-action@v2
        name: Build and push kibana image
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: wcogtas/kibana
          push: true
          path: ./gtas-parent/scripts/elastic
          dockerfile: ./gtas-parent/scripts/elastic/install/docker/kibana/kibana.Dockerfile
          tags: dev
      - uses: docker/build-push-action@v2
        name: Build and push elasticsearch image
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }} 
          repository: wcogtas/elasticsearch
          path: ./gtas-parent/scripts/elastic    
          dockerfile: ./gtas-parent/scripts/elastic/install/docker/elasticsearch/elasticsearch.Dockerfile
          tags: dev
      - uses: docker/build-push-action@v2
        name: Build and push logstash image
        with:  
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}   
          repository: wcogtas/logstash
          push: true
          path: ./gtas-parent/scripts/elastic
          dockerfile: ./gtas-parent/scripts/elastic/install/docker/logstash/logstash.Dockerfile
          tags: dev
      - uses: docker/build-push-action@v2
        name: Build and push ELK setup image
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }} 
          repository: wcogtas/elk-setup
          push: true
          path: ./gtas-parent/scripts/elastic
          dockerfile: ./gtas-parent/scripts/elastic/install/docker/elk-setup/elk-setup.Dockerfile
          tags: dev
      - uses: docker/build-push-action@v2
        name: Build and push Neo4J ETL job image     
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_PASSWORD }}  
          repository: wcogtas/neo4j-etl-job
          push: true
          path: .
          dockerfile: ./gtas-neo4j-etl/etl_job.Dockerfile
          tags: dev
      - uses: docker/build-push-action@v2
        name: Build and push Neo4J image
        with: 
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}  
          repository: wcogtas/neo4j
          push: true
          path: .
          dockerfile: ./gtas-neo4j-etl/neo4j.Dockerfile
          tags: dev
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Generate Kubernetes deployment configuration file
        shell: bash
        env:
          MARIADB_HOST: ${{ secrets.MARIADB_HOST }}
          MARIADB_USER: ${{ secrets.MARIADB_USER }}
          MARIADB_PASS: ${{ secrets.MARIADB_PASS }}
          PROXY_HOST: ${{ secrets.PROXY_HOST }}
        run: |
          echo $MARIADB_USER > ./gtas-parent/gtas-commons/secrets/mysql_etl_user.txt
          echo $MARIADB_PASS > ./gtas-parent/gtas-commons/secrets/mysql_etl_password.txt
          echo $MARIADB_USER > ./gtas-parent/gtas-commons/secrets/mysql-logstash-user
          echo $MARIADB_PASS > ./gtas-parent/gtas-commons/secrets/mysql-logstash-password
          echo $MARIADB_USER > ./gtas-parent/gtas-commons/secrets/mysql_processor_user.txt
          echo $MARIADB_PASS > ./gtas-parent/gtas-commons/secrets/mysql_processor_password.txt
          echo $MARIADB_USER > ./gtas-parent/gtas-commons/secrets/mysql_webapp_user.txt
          echo $MARIADB_PASS > ./gtas-parent/gtas-commons/secrets/mysql_webapp_password.txt

          sudo apt-get -y update
          sudo apt-get install -y curl
          curl -L https://github.com/kubernetes/kompose/releases/download/v1.21.0/kompose-linux-amd64 -o kompose
          chmod +x kompose
          sudo mv ./kompose /usr/local/bin/kompose
          kompose -f pipeline-deployment.yaml -f docker-compose.yml convert --out deploy.yaml
      - name: Clean resources
        uses: Consensys/kubernetes-action@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: delete deployments activemq elasticsearch elk-setup etl-job gtas-scheduler http-proxy kibana logstash mariadb neo4j web-app
      - name: Deploy to cluster
        uses: Consensys/kubernetes-action@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: apply --v=10 -f deploy.yaml
