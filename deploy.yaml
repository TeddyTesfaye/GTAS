apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f neo4j-etl-docker-compose.yml
        -f pipeline-deployment.yaml convert --out deploy.yaml --volumes hostPath
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: elasticsearch
    name: elasticsearch
  spec:
    ports:
    - name: "9300"
      port: 9300
      targetPort: 9300
    - name: "9200"
      port: 9200
      targetPort: 9200
    selector:
      io.kompose.service: elasticsearch
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f neo4j-etl-docker-compose.yml
        -f pipeline-deployment.yaml convert --out deploy.yaml --volumes hostPath
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: http-proxy
    name: http-proxy
  spec:
    ports:
    - name: "443"
      port: 443
      targetPort: 443
    - name: "80"
      port: 80
      targetPort: 80
    selector:
      io.kompose.service: http-proxy
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f neo4j-etl-docker-compose.yml
        -f pipeline-deployment.yaml convert --out deploy.yaml --volumes hostPath
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: kibana
    name: kibana
  spec:
    ports:
    - name: "5601"
      port: 5601
      targetPort: 5601
    selector:
      io.kompose.service: kibana
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f neo4j-etl-docker-compose.yml
        -f pipeline-deployment.yaml convert --out deploy.yaml --volumes hostPath
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: mariadb
    name: mariadb
  spec:
    ports:
    - name: "3306"
      port: 3306
      targetPort: 3306
    selector:
      io.kompose.service: mariadb
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f neo4j-etl-docker-compose.yml
        -f pipeline-deployment.yaml convert --out deploy.yaml --volumes hostPath
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: neo4j
    name: neo4j
  spec:
    ports:
    - name: "7474"
      port: 7474
      targetPort: 7474
    - name: "7687"
      port: 7687
      targetPort: 7687
    selector:
      io.kompose.service: neo4j
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f neo4j-etl-docker-compose.yml
        -f pipeline-deployment.yaml convert --out deploy.yaml --volumes hostPath
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: web-app
    name: web-app
  spec:
    ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
    - name: "8443"
      port: 8443
      targetPort: 8443
    selector:
      io.kompose.service: web-app
  status:
    loadBalancer: {}
- apiVersion: v1
  data:
    webapp-neo4j-password: YWRtaW4=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: webapp-neo4j-password
    name: webapp-neo4j-password
  type: Opaque
- apiVersion: v1
  data:
    mysql-logstash-user: bG9nc3Rhc2g=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mysql-logstash-user
    name: mysql-logstash-user
  type: Opaque
- apiVersion: v1
  data:
    elastic-bootstrap-password: YWRtaW4xMjM=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: elastic-bootstrap-password
    name: elastic-bootstrap-password
  type: Opaque
- apiVersion: v1
  data:
    logstash-keystore-password: YWRtaW4xMjM=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: logstash-keystore-password
    name: logstash-keystore-password
  type: Opaque
- apiVersion: v1
  data:
    mysql-etl-password: YWRtaW4=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mysql-etl-password
    name: mysql-etl-password
  type: Opaque
- apiVersion: v1
  data:
    mysql-healthcheck-password: YWRtaW4=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mysql-healthcheck-password
    name: mysql-healthcheck-password
  type: Opaque
- apiVersion: v1
  data:
    mysql-webapp-password: YWRtaW4=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mysql-webapp-password
    name: mysql-webapp-password
  type: Opaque
- apiVersion: v1
  data:
    etl-neo4j-user: bmVvNGo=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: etl-neo4j-user
    name: etl-neo4j-user
  type: Opaque
- apiVersion: v1
  data:
    mysql-logstash-password: YWRtaW4=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mysql-logstash-password
    name: mysql-logstash-password
  type: Opaque
- apiVersion: v1
  data:
    elastic-password: YWRtaW4xMjM=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: elastic-password
    name: elastic-password
  type: Opaque
- apiVersion: v1
  data:
    mysql-processor-password: YWRtaW4=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mysql-processor-password
    name: mysql-processor-password
  type: Opaque
- apiVersion: v1
  data:
    mysql-processor-user: cHJvY2Vzc29y
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mysql-processor-user
    name: mysql-processor-user
  type: Opaque
- apiVersion: v1
  data:
    elasticsearch-kibana-password: YWRtaW4xMjM=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: elasticsearch-kibana-password
    name: elasticsearch-kibana-password
  type: Opaque
- apiVersion: v1
  data:
    mysql-root-password: YWRtaW4=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mysql-root-password
    name: mysql-root-password
  type: Opaque
- apiVersion: v1
  data:
    mysql-webapp-user: d2ViYXBw
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mysql-webapp-user
    name: mysql-webapp-user
  type: Opaque
- apiVersion: v1
  data:
    mysql-healthcheck-user: aGVhbHRoY2hlY2sK
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mysql-healthcheck-user
    name: mysql-healthcheck-user
  type: Opaque
- apiVersion: v1
  data:
    etl-neo4j-password: YWRtaW4=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: etl-neo4j-password
    name: etl-neo4j-password
  type: Opaque
- apiVersion: v1
  data:
    elasticsearch-kibana-user: a2liYW5hZWxhc3RpY3VzZXI=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: elasticsearch-kibana-user
    name: elasticsearch-kibana-user
  type: Opaque
- apiVersion: v1
  data:
    elastic-ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTakNDQWpLZ0F3SUJBZ0lWQUsxUXJISWZYUkEvbGYwbyszaGtlZ09wQmNIR01BMEdDU3FHU0liM0RRRUIKQ3dVQU1EUXhNakF3QmdOVkJBTVRLVVZzWVhOMGFXTWdRMlZ5ZEdsbWFXTmhkR1VnVkc5dmJDQkJkWFJ2WjJWdQpaWEpoZEdWa0lFTkJNQjRYRFRJd01ERXdNekU1TlRBME1sb1hEVEl6TURFd01qRTVOVEEwTWxvd05ERXlNREFHCkExVUVBeE1wUld4aGMzUnBZeUJEWlhKMGFXWnBZMkYwWlNCVWIyOXNJRUYxZEc5blpXNWxjbUYwWldRZ1EwRXcKZ2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRE1iVjBxOHh4dXNSRDhoU2NCVnVMdQo1eVpDd2J6UHNMZk1aeGZXaVV0TDZyUU9udFlLVm5WMmxJRFhCQ2w1ZGxCSUZNcnlUaVF1YWFyVXJMaittSDRUClJBV0tyM05CaDVSenFWYzJFdFFwRXlYVVY3VURaekNQdDFaU1RnWHR6V3doY2JwdDgwSm1UZ0JoazdCMEwxeFUKR1IweEJhNEE4N3UzYU5TL041SjRkZFBwS1doelVqMVZkZU5kckQzNHBsazg3VWhHUEJmRnl3eEJRUy9Pd3RLWQpNQzdPaThLOFZ3WHczSEpxS21CY1krbzluamJZU3NPbk5UY1Q0T25Nc0FnVGdzQ3hYQ2VlaDNKVzRSeDNDMXNXCis1R2dqci82djhhSlFVS283M0dFN0N4S0hTN0RBTmRnbUFDQXlhQnRiV0ZKbmlDZVR6VGoyN1RTMVlDYk1CN1gKQWdNQkFBR2pVekJSTUIwR0ExVWREZ1FXQkJUTFIzZW1FT2c1SklSZkVpMTNTNlllUmtNQXNEQWZCZ05WSFNNRQpHREFXZ0JUTFIzZW1FT2c1SklSZkVpMTNTNlllUmtNQXNEQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01BMEdDU3FHClNJYjNEUUVCQ3dVQUE0SUJBUUNBZ3BjWDhRUVI4U2dzeU55TWI2RHM4SUpwY1FJLzJLeDhZSFhQbW1KV3RrNXkKK2lBTWtEZklqZEZ2d3hIU1dEbmtCMjh0QzEzUnJob2pqcVpVTHZwUjRPcWU0Vm00Ulg1RUxiSlVpSlh4OWZPNgpXMVQweGpZa3VxbkRWOEtxanplNEdQZzdCN2d1cDZzUTYwTnpiaVlsc1FHSVlZS3dkQlFLZkxLMS9LWnE1NkFLCkpJQ2pSMHF4ZWlQbDBGSjlwK2h5NmxtRERFTVlyRTRtZk5TKzZNb012WXNGZ0tzWXVydkFmdXlieTdueFFDWWQKT3FBQUZTMENqV05LTG14SzhjNDdCNWV0N3N6NU5QTTdTekhKdUJPVUVTWmtqWE9BRjBWZ3FCUm5USThwcUFRVgpFdk9hQ0JDaEVmTDQ0Vy95Nk9YT0M3czFSc0JqR2tzSW9YQ2E4c1lmCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: elastic-ca
    name: elastic-ca
  type: Opaque
- apiVersion: v1
  data:
    mysql-etl-user: ZXRs
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mysql-etl-user
    name: mysql-etl-user
  type: Opaque
- apiVersion: v1
  data:
    webapp-neo4j-user: bmVvNGo=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: webapp-neo4j-user
    name: webapp-neo4j-user
  type: Opaque
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f neo4j-etl-docker-compose.yml
        -f pipeline-deployment.yaml convert --out deploy.yaml --volumes hostPath
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: activemq
    name: activemq
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: activemq
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f
            neo4j-etl-docker-compose.yml -f pipeline-deployment.yaml convert --out
            deploy.yaml --volumes hostPath
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/gtas-webapp-network: "true"
          io.kompose.service: activemq
      spec:
        containers:
        - image: rmohr/activemq:5.15.9
          imagePullPolicy: ""
          name: activemq
          resources: {}
        restartPolicy: Always
        serviceAccountName: ""
        volumes: null
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: gtas-webapp-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/gtas-webapp-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/gtas-webapp-network: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f neo4j-etl-docker-compose.yml
        -f pipeline-deployment.yaml convert --out deploy.yaml --volumes hostPath
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: elasticsearch
    name: elasticsearch
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: elasticsearch
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f
            neo4j-etl-docker-compose.yml -f pipeline-deployment.yaml convert --out
            deploy.yaml --volumes hostPath
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/gtas-webapp-network: "true"
          io.kompose.service: elasticsearch
      spec:
        containers:
        - image: simbam1/elasticsearch:1.1.1
          imagePullPolicy: ""
          name: elasticsearch
          ports:
          - containerPort: 9300
          - containerPort: 9200
          resources: {}
          volumeMounts:
          - mountPath: /usr/share/elasticsearch/data
            name: es-data
          - mountPath: /usr/share/elasticsearch/config
            name: elasticsearch-conf
          - mountPath: /usr/share/elasticsearch/temp-cert
            name: elasticsearch-hostpath2
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - hostPath:
            path: /Users/simbamarufu/Documents/GitHub/GTAS
          name: es-data
        - hostPath:
            path: /Users/simbamarufu/Documents/GitHub/GTAS
          name: elasticsearch-conf
        - hostPath:
            path: /Users/simbamarufu/Documents/GitHub/GTAS/gtas-parent/gtas-commons/certs
          name: elasticsearch-hostpath2
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: gtas-webapp-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/gtas-webapp-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/gtas-webapp-network: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f neo4j-etl-docker-compose.yml
        -f pipeline-deployment.yaml convert --out deploy.yaml --volumes hostPath
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: elk-setup
    name: elk-setup
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: elk-setup
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f
            neo4j-etl-docker-compose.yml -f pipeline-deployment.yaml convert --out
            deploy.yaml --volumes hostPath
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/gtas-webapp-network: "true"
          io.kompose.service: elk-setup
      spec:
        containers:
        - env:
          - name: BOOTSTRAP_PATH
            value: /run/secrets/elastic-bootstrap-password/elastic-bootstrap-password
          - name: ELASTICSEARCH_HOST
            value: elasticsearch
          - name: ELASTIC_PATH
            value: /run/secrets/elastic-password/elastic-password
          - name: KIBANA_HOST
            value: kibana
          - name: KIBANA_PASSWORD_PATH
            value: /run/secrets/elasticsearch-kibana-password/elasticsearch-kibana-password
          - name: LOGSTASH_PASSWORD_PATH
            value: /run/secrets/logstash-keystore-password/logstash-keystore-password
          - name: MYSQL_PASSWORD_PATH
            value: /run/secrets/mysql-logstash-password/mysql-logstash-password
          - name: MYSQL_USER_PATH
            value: /run/secrets/mysql-logstash-user/mysql-logstash-user
          image: simbam1/elk-setup:1.1.2
          imagePullPolicy: ""
          name: elk-setup
          resources: {}
          volumeMounts:
          - mountPath: /run/secrets/logstash-keystore-password
            name: logstash-keystore-password
          - mountPath: /run/secrets/mysql-logstash-user
            name: mysql-logstash-user
          - mountPath: /run/secrets/mysql-logstash-password
            name: mysql-logstash-password
          - mountPath: /run/secrets/elastic-password
            name: elastic-password
          - mountPath: /run/secrets/elasticsearch-kibana-user
            name: elasticsearch-kibana-user
          - mountPath: /run/secrets/elasticsearch-kibana-password
            name: elasticsearch-kibana-password
          - mountPath: /run/secrets/elastic-bootstrap-password
            name: elastic-bootstrap-password
          - mountPath: /logstash-conf
            name: logstash-conf
          - mountPath: /kibana-conf
            name: kibana-conf
          - mountPath: /elasticsearch-conf
            name: elasticsearch-conf
          - mountPath: /usr/share/elasticsearch/config/certs/elasticsearch/
            name: elk-setup-hostpath3
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: logstash-keystore-password
          secret:
            items:
            - key: logstash-keystore-password
              path: logstash-keystore-password
            secretName: logstash-keystore-password
        - name: mysql-logstash-user
          secret:
            items:
            - key: mysql-logstash-user
              path: mysql-logstash-user
            secretName: mysql-logstash-user
        - name: mysql-logstash-password
          secret:
            items:
            - key: mysql-logstash-password
              path: mysql-logstash-password
            secretName: mysql-logstash-password
        - name: elastic-password
          secret:
            items:
            - key: elastic-password
              path: elastic-password
            secretName: elastic-password
        - name: elasticsearch-kibana-user
          secret:
            items:
            - key: elasticsearch-kibana-user
              path: elasticsearch-kibana-user
            secretName: elasticsearch-kibana-user
        - name: elasticsearch-kibana-password
          secret:
            items:
            - key: elasticsearch-kibana-password
              path: elasticsearch-kibana-password
            secretName: elasticsearch-kibana-password
        - name: elastic-bootstrap-password
          secret:
            items:
            - key: elastic-bootstrap-password
              path: elastic-bootstrap-password
            secretName: elastic-bootstrap-password
        - hostPath:
            path: /Users/simbamarufu/Documents/GitHub/GTAS
          name: logstash-conf
        - hostPath:
            path: /Users/simbamarufu/Documents/GitHub/GTAS
          name: kibana-conf
        - hostPath:
            path: /Users/simbamarufu/Documents/GitHub/GTAS
          name: elasticsearch-conf
        - hostPath:
            path: /Users/simbamarufu/Documents/GitHub/GTAS/gtas-parent/gtas-commons/certs
          name: elk-setup-hostpath3
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: gtas-webapp-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/gtas-webapp-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/gtas-webapp-network: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f neo4j-etl-docker-compose.yml
        -f pipeline-deployment.yaml convert --out deploy.yaml --volumes hostPath
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: etl-job
    name: etl-job
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: etl-job
    strategy: {}
    template:
      metadata:
        annotations:
          kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f
            neo4j-etl-docker-compose.yml -f pipeline-deployment.yaml convert --out
            deploy.yaml --volumes hostPath
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/gtas-webapp-network: "true"
          io.kompose.service: etl-job
      spec:
        containers:
        - env:
          - name: DB_HOSTNAME
            value: mariadb
          - name: MYSQL_PASSWORD_PATH
            value: /run/secrets/mysql_etl_password/mysql_etl_password
          - name: MYSQL_USER_PATH
            value: /run/secrets/mysql_etl_user/mysql_etl_user
          - name: NEO4J_HOSTNAME
            value: neo4j
          - name: NEO4J_PASSWORD_PATH
            value: /run/secrets/etl_neo4j_password/etl_neo4j_password
          - name: NEO4J_USER_PATH
            value: /run/secrets/etl_neo4j_user/etl_neo4j_user
          image: simbam1/neo4j-etl-job:1.0.1
          imagePullPolicy: ""
          name: etl-job
          resources: {}
          volumeMounts:
          - mountPath: /run/secrets/mysql-etl-user
            name: mysql-etl-user
          - mountPath: /run/secrets/mysql-etl-password
            name: mysql-etl-password
          - mountPath: /run/secrets/etl-neo4j-user
            name: etl-neo4j-user
          - mountPath: /run/secrets/etl-neo4j-password
            name: etl-neo4j-password
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: mysql-etl-user
          secret:
            items:
            - key: mysql-etl-user
              path: mysql-etl-user
            secretName: mysql-etl-user
        - name: mysql-etl-password
          secret:
            items:
            - key: mysql-etl-password
              path: mysql-etl-password
            secretName: mysql-etl-password
        - name: etl-neo4j-user
          secret:
            items:
            - key: etl-neo4j-user
              path: etl-neo4j-user
            secretName: etl-neo4j-user
        - name: etl-neo4j-password
          secret:
            items:
            - key: etl-neo4j-password
              path: etl-neo4j-password
            secretName: etl-neo4j-password
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: gtas-webapp-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/gtas-webapp-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/gtas-webapp-network: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f neo4j-etl-docker-compose.yml
        -f pipeline-deployment.yaml convert --out deploy.yaml --volumes hostPath
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: gtas-scheduler
    name: gtas-scheduler
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: gtas-scheduler
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f
            neo4j-etl-docker-compose.yml -f pipeline-deployment.yaml convert --out
            deploy.yaml --volumes hostPath
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/gtas-webapp-network: "true"
          io.kompose.service: gtas-scheduler
      spec:
        containers:
        - env:
          - name: ACTIVEMQ_HOST
            value: activemq
          - name: AUTOMATED_HIT_NOTIFICATION_EMAIL_ENABLED
            value: "false"
          - name: DB_HOST
            value: mariadb
          - name: EMAIL_SENDER_HOST
          - name: EMAIL_SENDER_PASSWORD
          - name: EMAIL_SENDER_USERNAME
          - name: JAVA_OPTS
            value: -Xms8000m -Xmx16000m -Duser.timezone=UTC -Djava.awt.headless=true
              -Djava.security.egd=file:/dev/./urandom
          - name: JAVA_TOOL_OPTIONS
            value: -XX:+IgnoreUnrecognizedVMOptions -XX:+UseContainerSupport
          - name: KIBANA_HOST
            value: kibana
          - name: MANUAL_HIT_NOTIFICATION_EMAIL_ENABLED
            value: "false"
          - name: MYSQL_PASSWORD_PATH
            value: /run/secrets/mysql_processor_password/mysql_processor_user
          - name: MYSQL_USER_PATH
            value: /run/secrets/mysql_processor_user/mysql_processor_user
          - name: NEO4J_HOST
            value: neo4j
          - name: NEO4J_PASSWORD_PATH
            value: /run/secrets/webapp_neo4j_password/webapp_neo4j_password
          - name: NEO4J_USER_PATH
            value: /run/secrets/webapp_neo4j_user/webapp_neo4j_user
          - name: PROXY_IP
          - name: SSL_TRUST_HOST
          image: simbam1/gtas-scheduler:1.0.1
          imagePullPolicy: ""
          name: gtas-scheduler
          resources: {}
          volumeMounts:
          - mountPath: /run/secrets/mysql-processor-user
            name: mysql-processor-user
          - mountPath: /run/secrets/mysql-processor-password
            name: mysql-processor-password
          - mountPath: /run/secrets/webapp-neo4j-user
            name: webapp-neo4j-user
          - mountPath: /run/secrets/webapp-neo4j-password
            name: webapp-neo4j-password
          - mountPath: /usr/local/tomcat/logs
            name: scheduler-logs
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: mysql-processor-user
          secret:
            items:
            - key: mysql-processor-user
              path: mysql-processor-user
            secretName: mysql-processor-user
        - name: mysql-processor-password
          secret:
            items:
            - key: mysql-processor-password
              path: mysql-processor-password
            secretName: mysql-processor-password
        - name: webapp-neo4j-user
          secret:
            items:
            - key: webapp-neo4j-user
              path: webapp-neo4j-user
            secretName: webapp-neo4j-user
        - name: webapp-neo4j-password
          secret:
            items:
            - key: webapp-neo4j-password
              path: webapp-neo4j-password
            secretName: webapp-neo4j-password
        - hostPath:
            path: /Users/simbamarufu/Documents/GitHub/GTAS
          name: scheduler-logs
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: gtas-webapp-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/gtas-webapp-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/gtas-webapp-network: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f neo4j-etl-docker-compose.yml
        -f pipeline-deployment.yaml convert --out deploy.yaml --volumes hostPath
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: http-proxy
    name: http-proxy
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: http-proxy
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f
            neo4j-etl-docker-compose.yml -f pipeline-deployment.yaml convert --out
            deploy.yaml --volumes hostPath
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/gtas-webapp-network: "true"
          io.kompose.service: http-proxy
      spec:
        containers:
        - env:
          - name: BOOTSTRAP_PATH
            value: /run/secrets/elastic-bootstrap-password/elastic-bootstrap-password
          image: simbam1/http-proxy:1.0.1
          imagePullPolicy: ""
          name: http-proxy
          ports:
          - containerPort: 443
          - containerPort: 80
          resources: {}
          volumeMounts:
          - mountPath: /run/secrets/elastic-bootstrap-password
            name: elastic-bootstrap-password
          - mountPath: /
            name: http-proxy-hostpath0
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: elastic-bootstrap-password
          secret:
            items:
            - key: elastic-bootstrap-password
              path: elastic-bootstrap-password
            secretName: elastic-bootstrap-password
        - hostPath:
            path: /Users/simbamarufu/Documents/GitHub/GTAS/gtas-parent/gtas-commons/certs
          name: http-proxy-hostpath0
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: gtas-webapp-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/gtas-webapp-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/gtas-webapp-network: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f neo4j-etl-docker-compose.yml
        -f pipeline-deployment.yaml convert --out deploy.yaml --volumes hostPath
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: kibana
    name: kibana
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: kibana
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f
            neo4j-etl-docker-compose.yml -f pipeline-deployment.yaml convert --out
            deploy.yaml --volumes hostPath
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/gtas-webapp-network: "true"
          io.kompose.service: kibana
      spec:
        containers:
        - env:
          - name: ELASTICSEARCH_HOSTS
            value: https://elasticsearch:9200
          image: simbam1/kibana:1.0.1
          imagePullPolicy: ""
          name: kibana
          ports:
          - containerPort: 5601
          resources: {}
          volumeMounts:
          - mountPath: /usr/share/kibana/data
            name: kibana-conf
          - mountPath: /etc/kibana/config/
            name: kibana-hostpath1
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - hostPath:
            path: /Users/simbamarufu/Documents/GitHub/GTAS
          name: kibana-conf
        - hostPath:
            path: /Users/simbamarufu/Documents/GitHub/GTAS/gtas-parent/gtas-commons/certs
          name: kibana-hostpath1
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: gtas-webapp-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/gtas-webapp-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/gtas-webapp-network: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f neo4j-etl-docker-compose.yml
        -f pipeline-deployment.yaml convert --out deploy.yaml --volumes hostPath
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: logstash
    name: logstash
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: logstash
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f
            neo4j-etl-docker-compose.yml -f pipeline-deployment.yaml convert --out
            deploy.yaml --volumes hostPath
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/gtas-webapp-network: "true"
          io.kompose.service: logstash
      spec:
        containers:
        - env:
          - name: ELASTIC_HOST
            value: https://elasticsearch
          - name: LOGSTASH_KEYSTORE_PASS
            value: admin123
          - name: MARIADB_HOST
            value: mariadb
          - name: XPACK_MONITORING_ELASTICSEARCH_HOSTS
            value: elasticsearch
          - name: XPACK_MONITORING_ELASTICSEARCH_SSL_CERTIFICATEAUTHORITY
            value: /run/secrets/elastic-ca/elastic-ca
          image: simbam1/logstash:1.0.1
          imagePullPolicy: ""
          name: logstash
          resources: {}
          volumeMounts:
          - mountPath: /run/secrets/elastic-ca
            name: elastic-ca
          - mountPath: /usr/share/logstash/config/
            name: logstash-conf
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: elastic-ca
          secret:
            items:
            - key: elastic-ca
              path: elastic-ca
            secretName: elastic-ca
        - hostPath:
            path: /Users/simbamarufu/Documents/GitHub/GTAS
          name: logstash-conf
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: gtas-webapp-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/gtas-webapp-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/gtas-webapp-network: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f neo4j-etl-docker-compose.yml
        -f pipeline-deployment.yaml convert --out deploy.yaml --volumes hostPath
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: mariadb
    name: mariadb
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: mariadb
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f
            neo4j-etl-docker-compose.yml -f pipeline-deployment.yaml convert --out
            deploy.yaml --volumes hostPath
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/gtas-webapp-network: "true"
          io.kompose.service: mariadb
      spec:
        containers:
        - env:
          - name: MYSQL_ROOT_PASSWORD_FILE
            value: /run/secrets/mysql-root-password
          image: simbam1/mariadb:1.0.1
          imagePullPolicy: ""
          name: mariadb
          ports:
          - containerPort: 3306
          resources: {}
          volumeMounts:
          - mountPath: /run/secrets/mysql-etl-user
            name: mysql-etl-user
          - mountPath: /run/secrets/mysql-etl-password
            name: mysql-etl-password
          - mountPath: /run/secrets/mysql-processor-user
            name: mysql-processor-user
          - mountPath: /run/secrets/mysql-processor-password
            name: mysql-processor-password
          - mountPath: /run/secrets/mysql-webapp-user
            name: mysql-webapp-user
          - mountPath: /run/secrets/mysql-webapp-password
            name: mysql-webapp-password
          - mountPath: /run/secrets/mysql-healthcheck-user
            name: mysql-healthcheck-user
          - mountPath: /run/secrets/mysql-healthcheck-password
            name: mysql-healthcheck-password
          - mountPath: /run/secrets/mysql-logstash-user
            name: mysql-logstash-user
          - mountPath: /run/secrets/mysql-logstash-password
            name: mysql-logstash-password
          - mountPath: /run/secrets/mysql-root-password
            name: mysql-root-password
          - mountPath: /var/lib/mysql
            name: db-data
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: mysql-etl-user
          secret:
            items:
            - key: mysql-etl-user
              path: mysql-etl-user
            secretName: mysql-etl-user
        - name: mysql-etl-password
          secret:
            items:
            - key: mysql-etl-password
              path: mysql-etl-password
            secretName: mysql-etl-password
        - name: mysql-processor-user
          secret:
            items:
            - key: mysql-processor-user
              path: mysql-processor-user
            secretName: mysql-processor-user
        - name: mysql-processor-password
          secret:
            items:
            - key: mysql-processor-password
              path: mysql-processor-password
            secretName: mysql-processor-password
        - name: mysql-webapp-user
          secret:
            items:
            - key: mysql-webapp-user
              path: mysql-webapp-user
            secretName: mysql-webapp-user
        - name: mysql-webapp-password
          secret:
            items:
            - key: mysql-webapp-password
              path: mysql-webapp-password
            secretName: mysql-webapp-password
        - name: mysql-healthcheck-user
          secret:
            items:
            - key: mysql-healthcheck-user
              path: mysql-healthcheck-user
            secretName: mysql-healthcheck-user
        - name: mysql-healthcheck-password
          secret:
            items:
            - key: mysql-healthcheck-password
              path: mysql-healthcheck-password
            secretName: mysql-healthcheck-password
        - name: mysql-logstash-user
          secret:
            items:
            - key: mysql-logstash-user
              path: mysql-logstash-user
            secretName: mysql-logstash-user
        - name: mysql-logstash-password
          secret:
            items:
            - key: mysql-logstash-password
              path: mysql-logstash-password
            secretName: mysql-logstash-password
        - name: mysql-root-password
          secret:
            items:
            - key: mysql-root-password
              path: mysql-root-password
            secretName: mysql-root-password
        - hostPath:
            path: /Users/simbamarufu/Documents/GitHub/GTAS
          name: db-data
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: gtas-webapp-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/gtas-webapp-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/gtas-webapp-network: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f neo4j-etl-docker-compose.yml
        -f pipeline-deployment.yaml convert --out deploy.yaml --volumes hostPath
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: neo4j
    name: neo4j
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: neo4j
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f
            neo4j-etl-docker-compose.yml -f pipeline-deployment.yaml convert --out
            deploy.yaml --volumes hostPath
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/gtas-webapp-network: "true"
          io.kompose.service: neo4j
      spec:
        containers:
        - image: simbam1/neo4j:1.0.1
          imagePullPolicy: ""
          name: neo4j
          ports:
          - containerPort: 7474
          - containerPort: 7687
          resources: {}
          volumeMounts:
          - mountPath: /data
            name: neo4j-data
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - hostPath:
            path: /Users/simbamarufu/Documents/GitHub/GTAS
          name: neo4j-data
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: gtas-webapp-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/gtas-webapp-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/gtas-webapp-network: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f neo4j-etl-docker-compose.yml
        -f pipeline-deployment.yaml convert --out deploy.yaml --volumes hostPath
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: web-app
    name: web-app
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: web-app
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose -f elk-docker-compose.yml -f docker-compose.yml -f
            neo4j-etl-docker-compose.yml -f pipeline-deployment.yaml convert --out
            deploy.yaml --volumes hostPath
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/gtas-webapp-network: "true"
          io.kompose.service: web-app
      spec:
        containers:
        - env:
          - name: ACTIVEMQ_HOST
            value: activemq
          - name: AUTOMATED_HIT_NOTIFICATION_EMAIL_ENABLED
            value: "false"
          - name: BOOTSTRAP_PATH
            value: /run/secrets/elastic-bootstrap-password/elastic-bootstrap-password
          - name: DB_HOST
            value: mariadb
          - name: ELASTICSEARCH
            value: elasticsearch
          - name: EMAIL_SENDER_HOST
          - name: EMAIL_SENDER_PASSWORD
          - name: EMAIL_SENDER_USERNAME
          - name: JAVA_OPTS
            value: -Xms4g -Xmx8g -XX:MaxPermSize=16g -Duser.timezone=UTC
          - name: JAVA_TOOL_OPTIONS
            value: -XX:+IgnoreUnrecognizedVMOptions -XX:+UseContainerSupport
          - name: KIBANA_HOST
            value: kibana
          - name: MANUAL_HIT_NOTIFICATION_EMAIL_ENABLED
            value: "false"
          - name: MYSQL_PASSWORD_PATH
            value: /run/secrets/mysql_webapp_password/mysql_webapp_password
          - name: MYSQL_USER_PATH
            value: /run/secrets/mysql_webapp_user/mysql_webapp_user
          - name: NEO4J_HOST
            value: neo4j
          - name: NEO4J_PASSWORD_PATH
            value: /run/secrets/webapp_neo4j_password/webapp_neo4j_password
          - name: NEO4J_USER_PATH
            value: /run/secrets/webapp_neo4j_user/webapp_neo4j_user
          - name: PROXY_HOST
            value: httpproxy
          - name: PROXY_IP
          - name: SSL_TRUST_HOST
          image: simbam1/webapp:1.0.1
          imagePullPolicy: ""
          name: web-app
          ports:
          - containerPort: 8080
          - containerPort: 8443
          resources: {}
          volumeMounts:
          - mountPath: /run/secrets/mysql-webapp-user
            name: mysql-webapp-user
          - mountPath: /run/secrets/mysql-webapp-password
            name: mysql-webapp-password
          - mountPath: /run/secrets/webapp-neo4j-user
            name: webapp-neo4j-user
          - mountPath: /run/secrets/webapp-neo4j-password
            name: webapp-neo4j-password
          - mountPath: /run/secrets/elastic-bootstrap-password
            name: elastic-bootstrap-password
          - mountPath: /root/.m2
            name: m2
          - mountPath: /scheduler-logs
            name: scheduler-logs
          - mountPath: /usr/local/tomcat/conf
            name: web-app-hostpath2
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: mysql-webapp-user
          secret:
            items:
            - key: mysql-webapp-user
              path: mysql-webapp-user
            secretName: mysql-webapp-user
        - name: mysql-webapp-password
          secret:
            items:
            - key: mysql-webapp-password
              path: mysql-webapp-password
            secretName: mysql-webapp-password
        - name: webapp-neo4j-user
          secret:
            items:
            - key: webapp-neo4j-user
              path: webapp-neo4j-user
            secretName: webapp-neo4j-user
        - name: webapp-neo4j-password
          secret:
            items:
            - key: webapp-neo4j-password
              path: webapp-neo4j-password
            secretName: webapp-neo4j-password
        - name: elastic-bootstrap-password
          secret:
            items:
            - key: elastic-bootstrap-password
              path: elastic-bootstrap-password
            secretName: elastic-bootstrap-password
        - hostPath:
            path: /Users/simbamarufu/Documents/GitHub/GTAS
          name: m2
        - hostPath:
            path: /Users/simbamarufu/Documents/GitHub/GTAS
          name: scheduler-logs
        - hostPath:
            path: /Users/simbamarufu/Documents/GitHub/GTAS/gtas-parent/gtas-commons/certs
          name: web-app-hostpath2
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: gtas-webapp-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/gtas-webapp-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/gtas-webapp-network: "true"
kind: List
metadata: {}

